<?php

/**
 * @file
 * Thirdwing D6 to D11 migration module.
 * 
 * Provides custom migration plugins and configurations for migrating
 * a Drupal 6 choir/band website to Drupal 11.
 * 
 * Features:
 * - Custom migration source plugins for D6 content
 * - Hybrid field display configuration system
 * - Incremental sync capabilities
 * - Content moderation workflow preservation
 * - Media-first architecture for file handling
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_migration_plugins_alter().
 * 
 * Removes default D6 and D7 migrations that conflict with our custom implementation.
 */
function thirdwing_migrate_migration_plugins_alter(array &$migrations) {
  
  // List of ALL default D6 migrations to disable
  $default_d6_migrations = [
    // Core D6 migrations
    'd6_action', 'd6_date_formats', 'd6_dblog_settings', 'd6_imagecache_presets',
    'd6_menu', 'd6_search_settings', 'd6_system_cron', 'd6_system_date', 
    'd6_system_file', 'd6_system_performance', 'd6_user_mail', 'd6_user_settings',
    'd6_filter_format', 'd6_custom_block', 'd6_comment_type', 'd6_node_type',
    'd6_taxonomy_vocabulary', 'd6_block', 'd6_file', 
    'd6_user_picture_file', 'd6_node_settings', 'd6_field',
    'd6_field_instance', 'd6_field_instance_widget_settings', 'd6_view_modes',
    'd6_field_formatter_settings', 'd6_upload_field', 'd6_comment_field',
    'd6_comment_field_instance', 'd6_comment_entity_display', 
    'd6_comment_entity_form_display', 'd6_comment', 'd6_contact_settings',
    'd6_language_content_settings', 'd6_language_content_taxonomy_vocabulary_settings',
    'd6_language_types', 'd6_language_negotiation_settings', 
    'd6_language_content_menu_settings', 'd6_menu_links', 'd6_node_setting_promote',
    'd6_node_setting_sticky', 'd6_node_setting_status', 'd6_url_alias',
    'd6_vocabulary_field', 'd6_vocabulary_field_instance', 'd6_vocabulary_entity_display',
    'd6_vocabulary_entity_form_display', 'd6_taxonomy_term', 'd6_user_contact_settings',
    'd6_comment_entity_form_display_subject',
    // REMOVED: 'd6_user_role' and 'd6_user' - we now use custom versions
  ];
  
  // List of ALL D7 migrations to disable
  $default_d7_migrations = [
    'd7_action', 'd7_contact_settings', 'd7_dblog_settings', 'd7_filter_format',
    'd7_filter_settings', 'd7_global_theme_settings', 'd7_language_content_menu_settings',
    'd7_language_negotiation_settings', 'd7_language_types', 'd7_node_settings',
    'd7_search_page', 'd7_search_settings', 'd7_system_authorize', 'd7_system_cron',
    'd7_system_date', 'd7_system_file', 'd7_system_mail', 'd7_system_performance',
    'd7_theme_settings', 'd7_user_flood', 'd7_user_mail', 'd7_user_settings',
    'd7_custom_block', 'd7_comment_type', 'd7_node_type', 'd7_taxonomy_vocabulary',
    'd7_user_role', 'd7_block', 'd7_comment_field', 'd7_comment_field_instance',
    'd7_comment_entity_form_display', 'd7_user', 'd7_comment', 'd7_comment_entity_display',
    'd7_comment_entity_form_display_subject', 'd7_language_content_settings',
    'd7_menu', 'd7_menu_links', 'd7_node_title_label', 'd7_url_alias'
  ];
  
  // Remove all default D6 migrations
  foreach ($default_d6_migrations as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
  
  // Remove all default D7 migrations
  foreach ($default_d7_migrations as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
  
  // Remove all d6_node: and d7_node: migrations
  foreach ($migrations as $id => $migration) {
    if (strpos($id, 'd6_node:') === 0 || 
        strpos($id, 'd6_node_complete:') === 0 ||
        strpos($id, 'd7_node:') === 0 || 
        strpos($id, 'd7_node_complete:') === 0 ||
        strpos($id, 'd6_node_revision:') === 0 ||
        strpos($id, 'd7_node_revision:') === 0) {
      unset($migrations[$id]);
    }
  }
  
  // Remove field migrations that would conflict with our custom content types
  $field_migrations_to_remove = [
    'd6_field', 'd6_field_instance', 'd6_field_instance_widget_settings',
    'd6_view_modes', 'd6_field_formatter_settings',
    'd7_field', 'd7_field_instance', 'd7_field_instance_widget_settings',
    'd7_view_modes', 'd7_field_formatter_settings'
  ];
  
  foreach ($field_migrations_to_remove as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node_type.
 * 
 * Automatically configure field displays when Thirdwing content types are created.
 * Part of the hybrid field display approach: automated defaults + manual customization.
 */
function thirdwing_migrate_node_type_insert(NodeTypeInterface $node_type) {
  $content_type = $node_type->id();
  
  // Only auto-configure displays for Thirdwing content types
  $thirdwing_types = [
    'activiteit',
    'foto', 
    'locatie',
    'nieuws',
    'pagina',
    'programma',
    'repertoire',
    'persoon',
    'vriend',
  ];
  
  if (in_array($content_type, $thirdwing_types)) {
    try {
      /** @var \Drupal\thirdwing_migrate\Service\ThirdwingFieldDisplayService $display_service */
      $display_service = \Drupal::service('thirdwing_migrate.field_display');
      
      // Configure displays for all view modes
      $view_modes = ['default', 'teaser', 'full', 'search_result'];
      foreach ($view_modes as $view_mode) {
        $display_service->configureContentTypeDisplay($content_type, $view_mode);
      }
      
      \Drupal::logger('thirdwing_migrate')->info(
        'Auto-configured field displays for new content type: @type',
        ['@type' => $content_type]
      );
      
    } catch (\Exception $e) {
      \Drupal::logger('thirdwing_migrate')->error(
        'Failed to auto-configure displays for content type @type: @error',
        ['@type' => $content_type, '@error' => $e->getMessage()]
      );
    }
  }
}

/**
 * Implements hook_field_config_insert().
 * 
 * Automatically update field displays when new fields are added to Thirdwing content types.
 * Ensures new fields are properly displayed without manual configuration.
 */
function thirdwing_migrate_field_config_insert(EntityInterface $entity) {
  /** @var \Drupal\field\FieldConfigInterface $entity */
  if ($entity->getTargetEntityTypeId() === 'node') {
    $content_type = $entity->getTargetBundle();
    
    // Only update displays for Thirdwing content types
    $thirdwing_types = [
      'activiteit',
      'foto', 
      'locatie',
      'nieuws',
      'pagina',
      'programma',
      'repertoire',
      'persoon',
      'vriend',
    ];
    
    if (in_array($content_type, $thirdwing_types)) {
      try {
        /** @var \Drupal\thirdwing_migrate\Service\ThirdwingFieldDisplayService $display_service */
        $display_service = \Drupal::service('thirdwing_migrate.field_display');
        
        // Reconfigure displays to include the new field
        $view_modes = ['default', 'teaser', 'full', 'search_result'];
        foreach ($view_modes as $view_mode) {
          $display_service->configureContentTypeDisplay($content_type, $view_mode);
        }
        
        \Drupal::logger('thirdwing_migrate')->info(
          'Updated field displays for @type after adding field @field',
          ['@type' => $content_type, '@field' => $entity->getName()]
        );
        
      } catch (\Exception $e) {
        \Drupal::logger('thirdwing_migrate')->error(
          'Failed to update displays for @type after adding field @field: @error',
          [
            '@type' => $content_type,
            '@field' => $entity->getName(),
            '@error' => $e->getMessage()
          ]
        );
      }
    }
  }
}

/**
 * Implements hook_modules_installed().
 * 
 * Configure field displays when the thirdwing_migrate module is installed.
 * FIXED: Removed invalid installModulesDependencies() call.
 */
function thirdwing_migrate_modules_installed($modules) {
  if (in_array('thirdwing_migrate', $modules)) {
    // Queue the display configuration for the next request
    $queue = \Drupal::queue('thirdwing_migrate_display_config');
    $queue->createItem(['action' => 'configure_all_displays']);
    
    \Drupal::logger('thirdwing_migrate')->info('Queued field display configuration for thirdwing_migrate module installation');
  }
}

/**
 * Implements hook_cron().
 * 
 * Process queued display configuration tasks.
 * Ensures reliable field display setup even if initial configuration fails.
 */
function thirdwing_migrate_cron() {
  $queue = \Drupal::queue('thirdwing_migrate_display_config');
  
  while ($item = $queue->claimItem()) {
    try {
      if ($item->data['action'] === 'configure_all_displays') {
        /** @var \Drupal\thirdwing_migrate\Service\ThirdwingFieldDisplayService $display_service */
        $display_service = \Drupal::service('thirdwing_migrate.field_display');
        $results = $display_service->configureAllDisplays();
        
        $success_count = 0;
        foreach ($results as $content_type => $view_modes) {
          foreach ($view_modes as $status) {
            if ($status === 'success') {
              $success_count++;
            }
          }
        }
        
        \Drupal::logger('thirdwing_migrate')->info(
          'Configured @count field displays via cron',
          ['@count' => $success_count]
        );
      }
      
      $queue->deleteItem($item);
      
    } catch (\Exception $e) {
      \Drupal::logger('thirdwing_migrate')->error(
        'Failed to process display configuration queue item: @error',
        ['@error' => $e->getMessage()]
      );
      
      // Release the item so it can be tried again later
      $queue->releaseItem($item);
    }
  }
}

/**
 * Implements hook_help().
 * 
 * Provide comprehensive help information about the Thirdwing migration system.
 */
function thirdwing_migrate_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.thirdwing_migrate':
      $output = '<h2>' . t('Thirdwing Migration Module') . '</h2>';
      $output .= '<p>' . t('Complete migration system for Thirdwing website from Drupal 6 to Drupal 11.') . '</p>';
      
      $output .= '<h3>' . t('Field Display Configuration (Hybrid Approach)') . '</h3>';
      $output .= '<p>' . t('The Thirdwing migration module uses a hybrid approach for field display configuration:') . '</p>';
      
      $output .= '<h4>' . t('Automated Default Displays') . '</h4>';
      $output .= '<ul>';
      $output .= '<li>' . t('<strong>Default view mode:</strong> Complete field layout with proper ordering') . '</li>';
      $output .= '<li>' . t('<strong>Teaser view mode:</strong> Summary displays for listings and previews') . '</li>';
      $output .= '<li>' . t('<strong>Full view mode:</strong> Detailed content display') . '</li>';
      $output .= '<li>' . t('<strong>Search result mode:</strong> Optimized for search listings') . '</li>';
      $output .= '</ul>';
      
      $output .= '<h4>' . t('Manual Customization Options') . '</h4>';
      $output .= '<ul>';
      $output .= '<li>' . t('Field reordering and grouping') . '</li>';
      $output .= '<li>' . t('Custom display formatters') . '</li>';
      $output .= '<li>' . t('Responsive display settings') . '</li>';
      $output .= '<li>' . t('Field-specific styling and layouts') . '</li>';
      $output .= '<li>' . t('Advanced view mode configurations') . '</li>';
      $output .= '</ul>';
      
      $output .= '<h3>' . t('Drush Commands') . '</h3>';
      $output .= '<ul>';
      $output .= '<li><code>drush thirdwing:setup-displays</code> - ' . t('Configure all field displays') . '</li>';
      $output .= '<li><code>drush thirdwing:validate-displays</code> - ' . t('Validate existing displays') . '</li>';
      $output .= '<li><code>drush thirdwing:setup-display-type [type]</code> - ' . t('Configure specific content type') . '</li>';
      $output .= '</ul>';
      
      $output .= '<h3>' . t('Migration Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('<strong>Content Types:</strong> 9 content types migrated from D6') . '</li>';
      $output .= '<li>' . t('<strong>Media Bundles:</strong> 4 media bundles replacing deprecated content types') . '</li>';
      $output .= '<li>' . t('<strong>Workflow Preservation:</strong> All 5 D6 workflows mapped to D11 content moderation') . '</li>';
      $output .= '<li>' . t('<strong>Incremental Sync:</strong> Regular content updates from source site') . '</li>';
      $output .= '</ul>';
      
      $output .= '<h3>' . t('Manual Customization') . '</h3>';
      $output .= '<p>' . t('After the automated setup, you can customize displays at:') . '</p>';
      $output .= '<p><strong>' . t('Structure > Content types > [Type] > Manage display') . '</strong></p>';
      
      $output .= '<h3>' . t('Installation Strategy') . '</h3>';
      $output .= '<p>' . t('The module is designed for installation on a clean Drupal 11 site while the old D6 site remains active as a backup until migration is complete.') . '</p>';
      
      return $output;
  }
}

/**
 * Get the last incremental sync timestamp.
 *
 * @return int
 *   Unix timestamp of last sync, or 0 if never synced.
 */
function thirdwing_migrate_get_last_sync() {
  return \Drupal::state()->get('thirdwing_migrate.last_sync', 0);
}

/**
 * Set the last incremental sync timestamp.
 *
 * @param int $timestamp
 *   Unix timestamp to store.
 */
function thirdwing_migrate_set_last_sync($timestamp = NULL) {
  if ($timestamp === NULL) {
    $timestamp = time();
  }
  \Drupal::state()->set('thirdwing_migrate.last_sync', $timestamp);
}

/**
 * Get sync history.
 *
 * @param int $limit
 *   Number of history entries to return.
 *
 * @return array
 *   Array of sync history entries.
 */
function thirdwing_migrate_get_sync_history($limit = 10) {
  $history = \Drupal::state()->get('thirdwing_migrate.sync_history', []);
  return array_slice($history, -$limit);
}