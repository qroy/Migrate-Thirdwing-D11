<?php

/**
 * @file
 * Thirdwing D6 to D11 migration module.
 * 
 * Provides custom migration plugins and configurations for migrating
 * a Drupal 6 choir/band website to Drupal 11.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_migration_plugins_alter().
 */
function thirdwing_migrate_migration_plugins_alter(array &$migrations) {
  
  // List of ALL default D6 migrations to disable
  $default_d6_migrations = [
    // Core D6 migrations
    'd6_action', 'd6_date_formats', 'd6_dblog_settings', 'd6_imagecache_presets',
    'd6_menu', 'd6_search_settings', 'd6_system_cron', 'd6_system_date', 
    'd6_system_file', 'd6_system_performance', 'd6_user_mail', 'd6_user_settings',
    'd6_filter_format', 'd6_custom_block', 'd6_comment_type', 'd6_node_type',
    'd6_taxonomy_vocabulary', 'd6_block', 'd6_file', 
    'd6_user_picture_file', 'd6_node_settings', 'd6_field',
    'd6_field_instance', 'd6_field_instance_widget_settings', 'd6_view_modes',
    'd6_field_formatter_settings', 'd6_upload_field', 'd6_comment_field',
    'd6_comment_field_instance', 'd6_comment_entity_display', 
    'd6_comment_entity_form_display', 'd6_comment', 'd6_contact_settings',
    'd6_language_content_settings', 'd6_language_content_taxonomy_vocabulary_settings',
    'd6_language_types', 'd6_language_negotiation_settings', 
    'd6_language_content_menu_settings', 'd6_menu_links', 'd6_node_setting_promote',
    'd6_node_setting_sticky', 'd6_node_setting_status', 'd6_url_alias',
    'd6_vocabulary_field', 'd6_vocabulary_field_instance', 'd6_vocabulary_entity_display',
    'd6_vocabulary_entity_form_display', 'd6_taxonomy_term', 'd6_user_contact_settings',
    'd6_comment_entity_form_display_subject',
    // REMOVED: 'd6_user_role' and 'd6_user' - we now use custom versions
  ];
  
  // List of ALL D7 migrations to disable
  $default_d7_migrations = [
    'd7_action', 'd7_contact_settings', 'd7_dblog_settings', 'd7_filter_format',
    'd7_filter_settings', 'd7_global_theme_settings', 'd7_language_content_menu_settings',
    'd7_language_negotiation_settings', 'd7_language_types', 'd7_node_settings',
    'd7_search_page', 'd7_search_settings', 'd7_system_authorize', 'd7_system_cron',
    'd7_system_date', 'd7_system_file', 'd7_system_mail', 'd7_system_performance',
    'd7_theme_settings', 'd7_user_flood', 'd7_user_mail', 'd7_user_settings',
    'd7_custom_block', 'd7_comment_type', 'd7_node_type', 'd7_taxonomy_vocabulary',
    'd7_user_role', 'd7_block', 'd7_comment_field', 'd7_comment_field_instance',
    'd7_comment_entity_form_display', 'd7_user', 'd7_comment', 'd7_comment_entity_display',
    'd7_comment_entity_form_display_subject', 'd7_language_content_settings',
    'd7_menu', 'd7_menu_links', 'd7_node_title_label', 'd7_url_alias'
  ];
  
  // Remove all default D6 migrations
  foreach ($default_d6_migrations as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
  
  // Remove all default D7 migrations
  foreach ($default_d7_migrations as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
  
  // Remove all d6_node: and d7_node: migrations
  foreach ($migrations as $id => $migration) {
    if (strpos($id, 'd6_node:') === 0 || 
        strpos($id, 'd6_node_complete:') === 0 ||
        strpos($id, 'd7_node:') === 0 || 
        strpos($id, 'd7_node_complete:') === 0 ||
        strpos($id, 'd6_node_revision:') === 0 ||
        strpos($id, 'd7_node_revision:') === 0) {
      unset($migrations[$id]);
    }
  }
  
  // Remove field migrations that would conflict with our custom content types
  $field_migrations_to_remove = [
    'd6_field', 'd6_field_instance', 'd6_field_instance_widget_settings',
    'd6_view_modes', 'd6_field_formatter_settings',
    'd7_field', 'd7_field_instance', 'd7_field_instance_widget_settings',
    'd7_view_modes', 'd7_field_formatter_settings'
  ];
  
  foreach ($field_migrations_to_remove as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
}

/**
 * Implements hook_install().
 */
function thirdwing_migrate_install() {
  // Test database connection on install
  try {
    $connection = Database::getConnection('default', 'migrate');
    $result = $connection->query("SELECT COUNT(*) FROM {users}")->fetchField();
    \Drupal::messenger()->addMessage(t('Migration database connection successful. Found @count users.', ['@count' => $result]));
  } catch (\Exception $e) {
    \Drupal::messenger()->addError(t('Migration database connection failed: @error', ['@error' => $e->getMessage()]));
  }
}

/**
 * Implements hook_requirements().
 */
function thirdwing_migrate_requirements($phase) {
  $requirements = [];
  
  if ($phase == 'runtime') {
    // Check migration database connection
    try {
      $connection = Database::getConnection('default', 'migrate');
      $user_count = $connection->query("SELECT COUNT(*) FROM {users}")->fetchField();
      $node_count = $connection->query("SELECT COUNT(*) FROM {node}")->fetchField();
      
      $requirements['thirdwing_migrate_db'] = [
        'title' => t('Thirdwing Migration Database'),
        'value' => t('Connected (@users users, @nodes nodes)', [
          '@users' => $user_count,
          '@nodes' => $node_count
        ]),
        'severity' => REQUIREMENT_OK,
      ];
    } catch (\Exception $e) {
      $requirements['thirdwing_migrate_db'] = [
        'title' => t('Thirdwing Migration Database'),
        'value' => t('Connection failed'),
        'description' => t('Error: @error', ['@error' => $e->getMessage()]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
    
    // Check required modules
    $required_modules = [
      'permissions_by_term' => 'Permissions by Term',
      'workflows' => 'Workflows',
      'content_moderation' => 'Content Moderation',
    ];
    
    foreach ($required_modules as $module => $label) {
      if (!\Drupal::moduleHandler()->moduleExists($module)) {
        $requirements['thirdwing_migrate_' . $module] = [
          'title' => t('Thirdwing Migration: @module', ['@module' => $label]),
          'value' => t('Not installed'),
          'description' => t('The @module module is required for full migration functionality.', ['@module' => $label]),
          'severity' => REQUIREMENT_WARNING,
        ];
      }
    }
  }
  
  return $requirements;
}