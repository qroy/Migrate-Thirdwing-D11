<?php

/**
 * @file
 * Thirdwing D6 to D11 migration module.
 * 
 * Provides custom migration plugins and configurations for migrating
 * a Drupal 6 choir/band website to Drupal 11.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_migration_plugins_alter().
 */
function thirdwing_migrate_migration_plugins_alter(array &$migrations) {
  
  // List of ALL default D6 migrations to disable
  $default_d6_migrations = [
    // Core D6 migrations
    'd6_action', 'd6_date_formats', 'd6_dblog_settings', 'd6_imagecache_presets',
    'd6_menu', 'd6_search_settings', 'd6_system_cron', 'd6_system_date', 
    'd6_system_file', 'd6_system_performance', 'd6_user_mail', 'd6_user_settings',
    'd6_filter_format', 'd6_custom_block', 'd6_comment_type', 'd6_node_type',
    'd6_taxonomy_vocabulary', 'd6_block', 'd6_file', 
    'd6_user_picture_file', 'd6_node_settings', 'd6_field',
    'd6_field_instance', 'd6_field_instance_widget_settings', 'd6_view_modes',
    'd6_field_formatter_settings', 'd6_upload_field', 'd6_comment_field',
    'd6_comment_field_instance', 'd6_comment_entity_display', 
    'd6_comment_entity_form_display', 'd6_comment', 'd6_contact_settings',
    'd6_language_content_settings', 'd6_language_content_taxonomy_vocabulary_settings',
    'd6_language_types', 'd6_language_negotiation_settings', 
    'd6_language_content_menu_settings', 'd6_menu_links', 'd6_node_setting_promote',
    'd6_node_setting_sticky', 'd6_node_setting_status', 'd6_url_alias',
    'd6_vocabulary_field', 'd6_vocabulary_field_instance', 'd6_vocabulary_entity_display',
    'd6_vocabulary_entity_form_display', 'd6_taxonomy_term', 'd6_user_contact_settings',
    'd6_comment_entity_form_display_subject',
    // REMOVED: 'd6_user_role' and 'd6_user' - we now use custom versions
  ];
  
  // List of ALL D7 migrations to disable
  $default_d7_migrations = [
    'd7_action', 'd7_contact_settings', 'd7_dblog_settings', 'd7_filter_format',
    'd7_filter_settings', 'd7_global_theme_settings', 'd7_language_content_menu_settings',
    'd7_language_negotiation_settings', 'd7_language_types', 'd7_node_settings',
    'd7_search_page', 'd7_search_settings', 'd7_system_authorize', 'd7_system_cron',
    'd7_system_date', 'd7_system_file', 'd7_system_mail', 'd7_system_performance',
    'd7_theme_settings', 'd7_user_flood', 'd7_user_mail', 'd7_user_settings',
    'd7_custom_block', 'd7_comment_type', 'd7_node_type', 'd7_taxonomy_vocabulary',
    'd7_user_role', 'd7_block', 'd7_comment_field', 'd7_comment_field_instance',
    'd7_comment_entity_form_display', 'd7_user', 'd7_comment', 'd7_comment_entity_display',
    'd7_comment_entity_form_display_subject', 'd7_language_content_settings',
    'd7_menu', 'd7_menu_links', 'd7_node_title_label', 'd7_url_alias'
  ];
  
  // Remove all default D6 migrations
  foreach ($default_d6_migrations as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
  
  // Remove all default D7 migrations
  foreach ($default_d7_migrations as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
  
  // Remove all d6_node: and d7_node: migrations
  foreach ($migrations as $id => $migration) {
    if (strpos($id, 'd6_node:') === 0 || 
        strpos($id, 'd6_node_complete:') === 0 ||
        strpos($id, 'd7_node:') === 0 || 
        strpos($id, 'd7_node_complete:') === 0 ||
        strpos($id, 'd6_node_revision:') === 0 ||
        strpos($id, 'd7_node_revision:') === 0) {
      unset($migrations[$id]);
    }
  }
  
  // Remove field migrations that would conflict with our custom content types
  $field_migrations_to_remove = [
    'd6_field', 'd6_field_instance', 'd6_field_instance_widget_settings',
    'd6_view_modes', 'd6_field_formatter_settings',
    'd7_field', 'd7_field_instance', 'd7_field_instance_widget_settings',
    'd7_view_modes', 'd7_field_formatter_settings'
  ];
  
  foreach ($field_migrations_to_remove as $migration_id) {
    if (isset($migrations[$migration_id])) {
      unset($migrations[$migration_id]);
    }
  }
}

/**
 * Get the last incremental sync timestamp.
 *
 * @return int
 *   Unix timestamp of last sync, or 0 if never synced.
 */
function thirdwing_migrate_get_last_sync() {
  return \Drupal::state()->get('thirdwing_migrate.last_sync', 0);
}

/**
 * Set the last incremental sync timestamp.
 *
 * @param int $timestamp
 *   Unix timestamp to store.
 */
function thirdwing_migrate_set_last_sync($timestamp = NULL) {
  if ($timestamp === NULL) {
    $timestamp = time();
  }
  \Drupal::state()->set('thirdwing_migrate.last_sync', $timestamp);
}

/**
 * Get sync history.
 *
 * @param int $limit
 *   Number of history entries to return.
 *
 * @return array
 *   Array of sync history entries.
 */
function thirdwing_migrate_get_sync_history($limit = 10) {
  $history = \Drupal::state()->get('thirdwing_migrate.sync_history', []);
  return array_slice($history, -$limit);
}

/**
 * Add entry to sync history.
 *
 * @param array $entry
 *   Sync history entry to add.
 */
function thirdwing_migrate_add_sync_history($entry) {
  $history = \Drupal::state()->get('thirdwing_migrate.sync_history', []);
  $history[] = $entry;
  
  // Keep only last 20 entries
  $history = array_slice($history, -20);
  
  \Drupal::state()->set('thirdwing_migrate.sync_history', $history);
}

/**
 * Check if source database is accessible.
 *
 * @return bool
 *   TRUE if source database is accessible, FALSE otherwise.
 */
function thirdwing_migrate_check_source_database() {
  try {
    $database = Database::getConnection('default', 'migrate');
    $user_count = $database->query('SELECT COUNT(*) FROM {users}')->fetchField();
    return is_numeric($user_count) && $user_count > 0;
  } catch (\Exception $e) {
    \Drupal::logger('thirdwing_migrate')->error('Source database check failed: @error', ['@error' => $e->getMessage()]);
    return FALSE;
  }
}

/**
 * Get content change statistics from source database.
 *
 * @param int $since_timestamp
 *   Unix timestamp to check changes since.
 * @param array $content_types
 *   Array of content types to check, or empty for all.
 *
 * @return array
 *   Array of content type statistics.
 */
function thirdwing_migrate_get_change_statistics($since_timestamp = NULL, array $content_types = []) {
  try {
    $database = Database::getConnection('default', 'migrate');
    $stats = [];
    
    // Default content types if none specified
    if (empty($content_types)) {
      $content_types = ['activiteit', 'nieuws', 'pagina', 'repertoire', 'foto', 'locatie', 'vriend'];
    }
    
    foreach ($content_types as $type) {
      $query = $database->select('node', 'n')
        ->condition('n.type', $type);
      
      if ($since_timestamp) {
        $query->condition('n.changed', $since_timestamp, '>=');
      }
      
      $count = $query->countQuery()->execute()->fetchField();
      $stats[$type] = $count;
    }
    
    return $stats;
  } catch (\Exception $e) {
    \Drupal::logger('thirdwing_migrate')->error('Failed to get change statistics: @error', ['@error' => $e->getMessage()]);
    return [];
  }
}

/**
 * Get user activity statistics from source database.
 *
 * @param int $since_timestamp
 *   Unix timestamp to check activity since.
 *
 * @return array
 *   Array with user activity statistics.
 */
function thirdwing_migrate_get_user_activity_statistics($since_timestamp = NULL) {
  try {
    $database = Database::getConnection('default', 'migrate');
    $stats = [];
    
    // Users who logged in since timestamp
    $login_query = $database->select('users', 'u')
      ->condition('u.uid', 0, '>')
      ->condition('u.status', 1);
    
    if ($since_timestamp) {
      $login_query->condition('u.login', $since_timestamp, '>=');
    }
    
    $stats['logins'] = $login_query->countQuery()->execute()->fetchField();
    
    // Users who accessed site since timestamp
    $access_query = $database->select('users', 'u')
      ->condition('u.uid', 0, '>')
      ->condition('u.status', 1);
    
    if ($since_timestamp) {
      $access_query->condition('u.access', $since_timestamp, '>=');
    }
    
    $stats['access'] = $access_query->countQuery()->execute()->fetchField();
    
    // New user registrations
    $new_query = $database->select('users', 'u')
      ->condition('u.uid', 0, '>')
      ->condition('u.status', 1);
    
    if ($since_timestamp) {
      $new_query->condition('u.created', $since_timestamp, '>=');
    }
    
    $stats['new_users'] = $new_query->countQuery()->execute()->fetchField();
    
    return $stats;
  } catch (\Exception $e) {
    \Drupal::logger('thirdwing_migrate')->error('Failed to get user activity statistics: @error', ['@error' => $e->getMessage()]);
    return [];
  }
}

/**
 * Implements hook_cron().
 * 
 * Optionally run incremental sync during cron (if enabled).
 */
function thirdwing_migrate_cron() {
  // Check if automatic sync is enabled
  $auto_sync = \Drupal::config('thirdwing_migrate.settings')->get('auto_sync_enabled');
  
  if ($auto_sync) {
    $interval = \Drupal::config('thirdwing_migrate.settings')->get('auto_sync_interval', 86400); // Default 24 hours
    $last_sync = thirdwing_migrate_get_last_sync();
    
    if ((time() - $last_sync) >= $interval) {
      \Drupal::logger('thirdwing_migrate')->info('Running automatic incremental sync via cron.');
      
      try {
        // Run a basic incremental sync
        $migration_manager = \Drupal::service('plugin.manager.migration');
        // Implementation would call the sync commands programmatically
        // This is a placeholder - full implementation would be more complex
      } catch (\Exception $e) {
        \Drupal::logger('thirdwing_migrate')->error('Automatic sync failed: @error', ['@error' => $e->getMessage()]);
      }
    }
  }
}